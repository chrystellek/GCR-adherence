---
title: "Adherence Aim"
format: docx
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  cache: true  
---

## Medication use during a pandemic

Chrystelle Kiang

```{r}
#| include: false
#| label: setup

library(here) 
library(tidyverse)
library(AdhereR)
library(gtsummary)
library(patchwork)
library(flextable) 

# this dataset has all eligible study population 
# created in data_creation.R 
# this version has multiple tumors per StudyID
pharmstudydata <- readRDS("studypopdata.rds")

elig_pop <- pharmstudydata %>%
  distinct(StudyID, .keep_all = TRUE) 

# subset pts who have rx and those who have rx after diagnosis
rx_before_dx <- pharmstudydata %>%
  filter(dispense_dt <= dt_diagnosis) %>%
    distinct(StudyID, .keep_all = TRUE)

# number with prescriptions outside of study period
rx_before_study <- pharmstudydata %>%
  anti_join(rx_before_dx, by = "StudyID") %>%
  group_by(StudyID) %>%
  arrange(dispense_dt) %>%
   summarise(last_dispense = max(dispense_dt)) %>%
  select(StudyID, last_dispense) %>%
  filter(!is.na(last_dispense),
         last_dispense < as.Date("2017-09-01", format = "%Y-%m-%d")) 

pop_no_rx <- pharmstudydata %>% 
  filter(is.na(dispense_dt)) %>%
      distinct(StudyID, .keep_all = TRUE)

# this is only those with a prescription
study_pop <- pharmstudydata %>% 
  anti_join(rx_before_dx, by = "StudyID") %>%
  filter(!is.na(dispense_dt),
         dispense_dt >= as.Date("2017-09-01", format = "%Y-%m-%d")) %>%
  mutate(daily_dose = 1,
  # creating this here in case we change these definitions
   urb_rural = case_when(
    RURALURBAN_CONTINUUM_2013 %in% c(1:7) ~ "Urban",
    RURALURBAN_CONTINUUM_2013 %in% c(8,9) ~ "Rural"))

  # only keep those with pharm info and after Sept 2017 to allow for fills that occur before 2018-01-01
# TODO check with notebook code
# this dataset has everyone with and without prescriptions 
pharmstudydata <- pharmstudydata %>%
  mutate(final_study = ifelse(StudyID %in% study_pop$StudyID, 1, 0),
            urb_rural = case_when(
    RURALURBAN_CONTINUUM_2013 %in% c(1:7) ~ "Urban",
    RURALURBAN_CONTINUUM_2013 %in% c(8,9) ~ "Rural"))

pop_info <- list(total_elig = n_distinct(elig_pop$StudyID),
                 no_rx = n_distinct(pop_no_rx$StudyID),
                 rx_predx = n_distinct(rx_before_dx$StudyID),
                 rx_prestudy = n_distinct(rx_before_study$StudyID),
                 total_study = n_distinct(study_pop$StudyID),
                 no_rx_percent = n_distinct(pop_no_rx$StudyID)/n_distinct(elig_pop$StudyID))
# TODO add %s? perhaps make a matrix and refer to that in the paragraph
```

### Study Population

There were `r formatC(pop_info$total_elig, big.mark = ",")` patients diagnosed with ER positive breast cancer at stages I to III between January 1, 2015 to July 31, 2019 and captured in the Georgia Cancer Registry. We did not have pharmacy claims data for `r formatC(pop_info$no_rx, big.mark = ",")` (`r formatC(pop_info$no_rx_percent*100, digits = 4, flag = "#")`%) patients. Among those with pharmacy claims data, `r formatC(pop_info$rx_predx, big.mark = ",")` had endocrine therapy before their date of diagnosis and `r formatC(pop_info$rx_prestudy, big.mark = ",")` only had prescriptions before the study period and were excluded. Our final study population consisted of `r formatC(pop_info$total_study, big.mark = ",")` patients.

```{r}
#| echo: false
#| warning: false
#| label: study-pop
#| tbl-cap: "Table 1"

# subset by demographic variable of interest
demo <- study_pop %>%
  group_by(StudyID) %>%
  slice(n()) %>%
  select(StudyID, CTCDATE_OF_DIAGNOSIS_YYYY, ERstatus, estrogen_receptor, stage_summary, drug_group, sex:reporting_source, urb_rural) %>%
  ungroup()
# list of demographics for inline reporting
demo_list <- list(
  n_asianPI = n_distinct(demo %>% filter(race_ethnicity == "NH API")),
  n_blackAA = n_distinct(demo %>% filter(race_ethnicity == "NH Black")),
  n_hispanic = n_distinct(demo %>% filter(race_ethnicity == "Hispanic")),
  n_AIAN = n_distinct(demo %>% filter(race_ethnicity == "NH AI/AN")),
  n_unknown = n_distinct(demo %>% filter(race_ethnicity == "Unknown by patient")),
  n_white = n_distinct(demo %>% filter(race_ethnicity == "NH White")),
  n_other = n_distinct(demo %>% filter(race_ethnicity %in% c("NH Other"))),
  n_urban = n_distinct(demo %>% filter(urb_rural == "Urban")),
  n_rural = n_distinct(demo %>% filter(urb_rural == "Rural"))
)

# TODO make a table of race/eth to report %'s inline
median(study_pop$days_supply)
```

### Results

Our study population consisted of `r formatC(pop_info$total_study, big.mark = ",")` eligible patients who had breast cancer diagnosed **between YEARS, ER+, Stage III, with** at least one prescription for AI or tamoxifen between January 1, 2018 and December 31, 2021. Descriptive statistics are provided in Table 1. Among those with prescription, the mean duration of supply was `r mean(study_pop$days_supply)` days.


```{r}
#| include: false
#| eval: false
#| label: simple-table-1
table1 <- study_pop %>% 
  distinct(StudyID, .keep_all = TRUE) %>%
  tbl_summary(include = c(CTCAGE_AT_DIAGNOSIS, stage_summary, estrogen_receptor, laterality, reporting_source, CTCDATE_OF_DIAGNOSIS_YYYY, race_ethnicity, marital_status, urb_rural))
```

```{r}
#| echo: false
#| warning: false
#| label: table-1
#| tbl-cap: "Table 1"

table1 <- pharmstudydata %>% 
  distinct(StudyID, .keep_all = TRUE) %>%
  ungroup() %>%
  select(CTCAGE_AT_DIAGNOSIS, stage_summary, estrogen_receptor, laterality, reporting_source, CTCDATE_OF_DIAGNOSIS_YYYY, race_ethnicity, marital_status, urb_rural, final_study) %>%
  tbl_summary(by = final_study)

as_flex_table(table1)
```

```{r}
#| eval: false
#| echo: false
#| label: run-cma

# this is code that used to get CMA
# first is the function does OW per person then there are a few steps to prep data for function, which is below function 
# function to run CMA, input is dataset and choice of CMA 
run_CMA <- function(data, CMA_choice){
  # creating these so can change inside of function to be able to loop thru
  FU_start <- as.Date("2017-10-09", format = "%Y-%m-%d") 
  FU_end <- as.Date("2022-01-01", format = "%Y-%m-%d")
  FU_duration <- as.integer(difftime(FU_end, FU_start, units = "weeks"))
  Jan1 <- as.Date("2018-01-01", format = "%Y-%m-%d")
  
  OW_duration <- min(208, first(data$OW_duration), na.rm = TRUE)
  
    cma <- CMA_sliding_window(CMA.to.apply = CMA_choice,
                     data = data,
                     ID.colname = "StudyID",
                     event.date.colname = "dispense_dt",
                     event.duration.colname = "days_supply",
                     event.daily.dose.colname ="daily_dose",
                     medication.class.colname = "AETdrug",
                     carry.only.for.same.medication = FALSE,
                     consider.dosage.change = FALSE,
                     followup.window.start = FU_start,
                     followup.window.duration = FU_duration,
                     followup.window.duration.unit = "weeks",
                     observation.window.start = Jan1,
                     observation.window.duration = OW_duration,
                     observation.window.duration.unit = "weeks",
                     sliding.window.start = 0, 
                     sliding.window.start.unit = "weeks",
                     sliding.window.duration = 4,
                     sliding.window.duration.unit = "weeks",
                     # if window and step are same, there is no overlap
                     sliding.window.step.duration = 4,
                     sliding.window.step.unit = "weeks",
                     date.format = "%Y/%m/%d",
                     parallel.backend = "none",
                     parallel.threads = 1) 
  result <- as_tibble(cma$CMA)
  return(result)
}

# Steps I take to make each OW flexible per person
# 1. getting last dispense date for each ID
ID_dispense <- study_pop %>%
  group_by(StudyID) %>%
    arrange(dispense_dt) %>%
     summarise(first_dispense = min(dispense_dt),
          last_dispense = max(dispense_dt),
          days_supply = last(days_supply)) %>%
    mutate(end_supply = last_dispense + days_supply + days(30)) %>%
  select(StudyID, first_dispense, last_dispense, end_supply)

# 2. add columns back
study_run <- study_pop %>%
  inner_join(ID_dispense, by = "StudyID") %>%
  mutate(horm_mo = case_when(is.na(CTCRX_SUMM_DATE_HORMONE_MM) ~ 1,
                              TRUE ~ CTCRX_SUMM_DATE_HORMONE_MM),
         horm_dd = case_when(is.na(CTCRX_SUMM_DATE_HORMONE_DD) ~ 1,
                            TRUE ~ CTCRX_SUMM_DATE_HORMONE_DD),
         horm_dt = case_when(!is.na(CTCRX_SUMM_DATE_HORMONE_YYYY) ~ as.Date(
           paste(CTCRX_SUMM_DATE_HORMONE_YYYY,
                 sprintf("%02d", as.numeric(horm_mo)),
                 sprintf("%02d", as.numeric(horm_dd)),
                 sep = "-"), format = "%Y-%m-%d")),
         horm_end_dt = horm_dt + years(5),
         death_dt = case_when(PATIENTVITAL_STATUS == 0 ~ as.Date(paste(PATIENTDATE_OF_LAST_CONTACT_YYYY, PATIENTDATE_OF_LAST_CONTACT_MM, PATIENTDATE_OF_LAST_CONTACT_DD,
                 sep = "-"), format = "%Y-%m-%d")),
         OW_end = case_when(PATIENTVITAL_STATUS == 0 ~ max(as.Date("2018-01-01",format = "%Y-%m-%d"), death_dt),
                            PATIENTVITAL_STATUS == 1 ~ max(end_supply, horm_end_dt, na.rm = TRUE)),
         OW_duration = as.integer(ceiling((difftime(OW_end, "2018-01-01", units = "weeks"))/4) * 4),
         OW_duration = ifelse(OW_duration < 0, 0, OW_duration))

# 3. loop through
result_list <- c()
for (i in unique(study_run$StudyID)){
  study_data <- study_run[study_run$StudyID == i, ]
  result <- run_CMA(study_data, "CMA7")
  result_list[[i]] <- result
}

cma_results <- bind_rows(result_list)

# then can use get_cma_results function to get the proportion adherent and etc
# or just code to summarize 
```

```{r}
#| include: false
#| label: get-results-function

# function that outputs regression table and basic ggplot
# input dataset is the output of CMA results saved as tibble
get_cma_results <- function(dataset, COVID_start){
  reg_output <- c()
  reg_summary <- c()
  reg_plot <- c()
  results_list <- c()
  
  dataset <- dataset %>%
      mutate(adherent = case_when(
      CMA >= 0.80 ~ 1,
      CMA < 0.80 ~ 0)) %>%
    group_by(window.start) %>%
    reframe(adherent_count = sum(adherent == 1, na.rm = TRUE), 
            non_adherent_count = sum(adherent == 0, na.rm = TRUE),
            adherent_NA_count = sum(is.na(adherent)),
            # TODO run CMAs again, updated to mean() because of NAs
            prop_adherent = mean(adherent, na.rm = TRUE),
            prop_NA = adherent_NA_count/(adherent_NA_count + adherent_count + adherent_NA_count)) %>%
    arrange(window.start) %>%
    mutate(post_COVID = if_else(window.start >= COVID_start, 1, 0),
           window.ID = row_number()) %>%
    ungroup()
  
  its <- lm(prop_adherent ~ window.ID + post_COVID + window.ID*post_COVID, data = dataset)
  reg_summary <- summary(its)
  
  dataset2 <- dataset %>% na.omit(prop_adherent) %>%
    mutate(fit = predict(its))

  reg_plot <- ggplot(dataset2, aes(x = window.start, y = prop_adherent)) +
    geom_point() +
    geom_line(aes(y = fit), colour = "blue", linewidth = 1) +
    geom_vline(xintercept = COVID_start, colour = "red") 
  
  results_list <- list(data_summary = dataset,
                       reg_output = its,
                   reg_summary = reg_summary,
                   reg_plot = reg_plot)
  return(results_list)
}
```

```{r}
#| echo: false
#| warning: false
#| label: main-its
#| fig-cap: "Overall ITS" 

# for the sake of time, loading results from before
# but were done using function above
# run March 26 in notebook file. 
cma7 <- readRDS("./data/cma7.rds")

march14 <- as.Date("2020-03-14", format = "%Y-%m-%d")
cma7_results <- get_cma_results(cma7, march14)
# function output is dataset with summaries for each time interval, regression model, regression summary, and plot for times with NO missings.
cma7_data <- cma7_results$data_summary
write_csv(cma7_data, "./data/cma7-summary.csv")
main_plot <- cma7_results$reg_plot + 
labs(x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + 
  theme_bw()
main_plot
```

In our ITS regression analyses, there was a small decrease in the proportion of patients who were adherent before the pandemic (−0.58%, 95% CI -0.63%, -0.53%), suggestion of slight increase in adherence at the time of the pandemic (2.2%, 95% CI -0.8%, 5.23%) and no linear change in adherence in the years during the pandemic (0.04%, 95% CI -0.05%, 0.12%). This is plotted in Figure X above.

```{r}
#| echo: false
#| warning: false
#| label: main-reg-table
#| tbl-cap: "Regression table" 

# TODO add title, change vars shown
as_flex_table(cma7_results$reg_summary %>%
  tbl_regression(estimate_fun = ~ style_number(.x, digits = 4)))
```

#### Subgroup analyses

We repeated this among demographic subgroups of interest, by race/ethnicity, county-level urbanicity (at time of diagnosis), marital status (at time of diagnosis), and year of diagnosis.

##### Race/ethnicity

There are `r formatC(demo_list$n_white, big.mark = ",")` patients of White race, `r formatC(demo_list$n_blackAA, big.mark = ",")` Black, `r formatC(demo_list$n_asianPI, big.mark = ",")` Asian or Pacific Islander, `r formatC(demo_list$n_AIAN, big.mark = ",")` Alaskan Native, American Indian, `r demo_list$n_other` other, and `r demo_list$n_unknown` unknown (to patinet) race, and `r formatC(demo_list$n_hispanic, big.mark = ",")` Hispanic .

```{r}
#| echo: false
#| warning: false
#| label: by-race
#| fig-cap: "By race" 

# White 
pdc_white <- demo %>%
  filter(race_ethnicity == "NH White") %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
# TODO remove title
white_plot <- pdc_white$reg_plot + 
labs(title = "NH White", x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

# Black 
pdc_blackAA <- demo %>%
  filter(race_ethnicity == "NH Black") %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)

blackAA_plot <- pdc_blackAA$reg_plot + 
labs(title = "NH Black", x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

# Asian 
pdc_API <- demo %>%
  filter(race_ethnicity == "NH API") %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
API_plot <- pdc_API$reg_plot + 
labs(title = "NH API", x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

# Hispanic
pdc_hisp <- demo %>%
  filter(race_ethnicity == "Hispanic") %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
hisp_plot <- pdc_hisp$reg_plot + 
labs(title = "Hispanic", x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

# question of order of presentation
raceth_plots <- wrap_plots(white_plot, blackAA_plot, API_plot, hisp_plot) + plot_annotation(tag_levels = 'A')
raceth_plots
```

By race/ethnicity, adherence appears to have greater range among NH Black or AA, NH Asian, and Hispanic patients compared to NH White patients.

```{r}
#| echo: false
#| warning: false
#| label: subgroup-tables
#| tbl-cap: "Regressions by race"

as_flex_table(pdc_white$reg_summary %>%
  tbl_regression(estimate_fun = ~ style_number(.x, digits = 4))) 

as_flex_table(pdc_blackAA$reg_summary %>%
  tbl_regression(estimate_fun = ~ style_number(.x, digits = 4))) 
  
as_flex_table(pdc_API$reg_summary %>%
  tbl_regression(estimate_fun = ~ style_number(.x, digits = 4)))

as_flex_table(pdc_hisp$reg_summary %>%
  tbl_regression(estimate_fun = ~ style_number(.x, digits = 4))) 
```

##### Rural/urban

There are `r formatC(demo_list$n_urban, big.mark = ",")` patients who resided in urban or suburban counties, defined as XXX,XXX people, and `r formatC(demo_list$n_rural, big.mark = ",")` patients in rural counties.

```{r}
#| echo: false
#| warning: false
#| label: urban-rural
#| fig-cap: "Urban and Rural" 
#| tbl-cap: "Urban and Rural" 

# Urban 
pdc_urban <- demo %>%
  filter(urb_rural == "Urban") %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
urban_plot <- pdc_urban$reg_plot + 
labs(title = "Urban", x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

# Rural
pdc_rural <- demo %>%
  filter(urb_rural == "Rural") %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
rural_plot <- pdc_rural$reg_plot + 
labs(title = "Rural", x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

urb_rur_plot <- wrap_plots(urban_plot, rural_plot) + plot_annotation(tag_levels = 'A')
urb_rur_plot

# as_flex_table(pdc_urban$reg_summary %>%
#  tbl_regression(estimate_fun = ~ style_number(.x, digits = 4)) %>%
#    modify_header(label = "**Variable**"))

# as_flex_table(pdc_rural$reg_summary %>%
#  tbl_regression(estimate_fun = ~ style_number(.x, digits = 4)) %>%
#    modify_header(label = "**Variable**"))
```

##### Diagnosis year

```{r}
#| echo: false
#| warning: false
#| label: dx-year
#| fig-cap: "Diagnosis year" 

study_start <- as.Date("2018-01-01", format = "%Y-%m-%d")
study_end <- as.Date("2022-01-01", format = "%Y-%m-%d")

# 2015
pdc_2015 <- demo %>%
  filter(CTCDATE_OF_DIAGNOSIS_YYYY == 2015) %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
plot_2015 <- 
  pdc_2015$reg_plot + 
labs(title = "2015", x = "Year", y = "Proportion Adherent (80%)") +
  scale_x_date(limits = c(study_start, study_end)) +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()
 
pdc_2016 <- demo %>%
  filter(CTCDATE_OF_DIAGNOSIS_YYYY == 2016) %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
plot_2016 <- pdc_2016$reg_plot + 
  labs(title = "2016", x = "Year", y = "Proportion Adherent (80%)") +
  scale_x_date(limits = c(study_start, study_end)) +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

pdc_2017 <- demo %>%
  filter(CTCDATE_OF_DIAGNOSIS_YYYY == 2017) %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
plot_2017 <- pdc_2017$reg_plot + 
  labs(title = "2017", x = "Year", y = "Proportion Adherent (80%)") +
  scale_x_date(limits = c(study_start, study_end)) +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()
 
pdc_2018 <- demo %>%
  filter(CTCDATE_OF_DIAGNOSIS_YYYY == 2018) %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
plot_2018 <- pdc_2018$reg_plot + 
  labs(title = "2018", x = "Year", y = "Proportion Adherent (80%)") +
  scale_x_date(limits = c(study_start, study_end)) +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

pdc_2019 <- demo %>%
  filter(CTCDATE_OF_DIAGNOSIS_YYYY == 2019) %>%
  left_join(cma7, by = "StudyID") %>%
  get_cma_results(march14)
plot_2019 <- pdc_2019$reg_plot + 
  labs(title = "2019", x = "Year", y = "Proportion Adherent (80%)") +
  scale_x_date(limits = c(study_start, study_end)) +
  scale_y_continuous(limits = c(0.1,1)) + theme_bw()

dx_year_plots <- (plot_2015 + plot_2016) / (plot_2017 + plot_2018) / (plot_2019 + plot_spacer()) + plot_annotation(tag_levels = 'A')
dx_year_plots
```

### Additional material


#### Other CMAs

Compared different CMAs. CMA7 is based on observation window, which varies between patients, while CMA4, 5, and 6 are based on dispense dates.

```{r}
#| echo: false
#| warning: false
#| label: other-CMAs
#| fig-cap: "CMAs"
#| tbl-cap: "CMAs"


#TODO add April and/or recentering of COVID time 0
COVID_start <- as.Date("2020-03-14", format = "%Y-%m-%d")

cma6 <- readRDS("./data/cma6.rds")
cma6_results <- get_cma_results(cma6, COVID_start)
# function output is dataset with summaries for each time interval, regression model, regression summary, and plot for times with NO missings.
cma6_summ_data <- cma6_results$data_summary
cma6_plot <- cma6_results$reg_plot + 
labs(x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + 
  theme_bw()

cma5 <- readRDS("./data/cma5.rds")
cma5_results <- get_cma_results(cma5, COVID_start)
# function output is dataset with summaries for each time interval, regression model, regression summary, and plot for times with NO missings.
cma5_summ_data <- cma5_results$data_summary
cma5_plot <- cma5_results$reg_plot + 
labs(x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + 
  theme_bw()


cma4 <- readRDS("./data/cma4.rds")
cma4_results <- get_cma_results(cma4, COVID_start)
cma4_summ_data <- cma4_results$data_summary
cma4_plot <- cma4_results$reg_plot + 
labs(title = "CMA4", x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + 
  theme_bw()

its_plots <- (main_plot + cma6_plot) / (cma5_plot + cma4_plot)
its_plots
```

While PDC was more appropriate measure compared to MPR, still had to choose which CMA to best approximate PDC given package options. Chose CMA7 because it seems to best incorporate observation window (treatment time) in the denominator. This seems confirmed when considering categorization and however measures are calculated. CMA7 has the least proportion missings per time of observation. We can see a decline in the number of missings over the first two years, which is expected as patients with year of diagnosis in 2018 and 2019 should not yet have a PDC in 2018 or 2019.

```{r}
#| echo: false
#| eval: false
#| label: other-CMAs-counts
#| fig-cap: "CMA counts"

# TODO count the missings again based on total N and not window ID 
# Counts of adherent, not, and missing at each 4-week interval
cma7_data <- cma7_results$data_summary
cma7_counts_plot <- ggplot(cma7_data, aes(x = window.start, y = adherent_count)) +
  geom_point(aes(y = adherent_count), color = "black") +
  geom_line(aes(y = adherent_count), color = "black") +
  geom_point(aes(y = non_adherent_count), color = "blue") +
  geom_line(aes(y = non_adherent_count), color = "blue") +
  geom_point(aes(y = adherent_NA_count), color = "green") +
  geom_line(aes(y = adherent_NA_count), color = "green") +
  scale_y_continuous(limits = c(0,9000)) +
  labs(title = "CMA7", x = "Year", y = "Count") + 
  theme_bw()

cma6_counts_plot <- ggplot(cma6_summ_data, aes(x = window.start, y = adherent_count)) +
  geom_point(aes(y = adherent_count), color = "black") +
  geom_line(aes(y = adherent_count), color = "black") +
  geom_point(aes(y = non_adherent_count), color = "blue") +
  geom_line(aes(y = non_adherent_count), color = "blue") +
  geom_point(aes(y = adherent_NA_count), color = "green") +
  geom_line(aes(y = adherent_NA_count), color = "green") +
  scale_y_continuous(limits = c(0,9000)) +
  labs(title = "CMA6", x = "Year", y = "Count") + 
  theme_bw()

cma5_counts_plot <- ggplot(cma5_summ_data, aes(x = window.start, y = adherent_count)) +
  geom_point(aes(y = adherent_count), color = "black") +
  geom_line(aes(y = adherent_count), color = "black") +
  geom_point(aes(y = non_adherent_count), color = "blue") +
  geom_line(aes(y = non_adherent_count), color = "blue") +
  geom_point(aes(y = adherent_NA_count), color = "green") +
  geom_line(aes(y = adherent_NA_count), color = "green") +
#  geom_vline(xintercept = COVID_start, colour = "red") +
  scale_y_continuous(limits = c(0,9000)) +
  labs(title = "CMA5", x = "Year", y = "Count") + 
  theme_bw()

cma4_counts_plot <- ggplot(cma4_summ_data, aes(x = window.start, y = adherent_count)) +
  geom_point(aes(y = adherent_count), color = "black") +
  geom_line(aes(y = adherent_count), color = "black") +
  geom_point(aes(y = non_adherent_count), color = "blue") +
  geom_line(aes(y = non_adherent_count), color = "blue") +
  geom_point(aes(y = adherent_NA_count), color = "green") +
  geom_line(aes(y = adherent_NA_count), color = "green") +
#  geom_vline(xintercept = COVID_start, colour = "red") +
  scale_y_continuous(limits = c(0,9000)) +
  labs(title = "CMA4", x = "Year", y = "Count") + 
  theme_bw()

counts_plots <- (cma7_counts_plot + cma6_counts_plot) / (cma5_counts_plot + cma4_counts_plot)
counts_plots
# TODO make these look better
```

Additional analyses

```{r}
#| eval: false
#| echo: false
#| label: run-other-analyses

# Running these on 4/4/24 and save as RDS for time
# Interval length & OW only based on dispense end 

# Steps I take to make each OW flexible per person
# 1. getting last dispense date for each ID
ID_dispense <- study_pop %>%
  group_by(StudyID) %>%
    arrange(dispense_dt) %>%
     summarise(first_dispense = min(dispense_dt),
          last_dispense = max(dispense_dt),
          days_supply = last(days_supply)) %>%
    mutate(end_supply = last_dispense + days_supply + days(30)) %>%
  select(StudyID, first_dispense, last_dispense, end_supply)

# 2. add columns back
study_run2 <- study_pop %>%
  inner_join(ID_dispense, by = "StudyID") %>%
  mutate(death_dt = case_when(PATIENTVITAL_STATUS == 0 ~ as.Date(paste(PATIENTDATE_OF_LAST_CONTACT_YYYY, PATIENTDATE_OF_LAST_CONTACT_MM, PATIENTDATE_OF_LAST_CONTACT_DD,
                 sep = "-"), format = "%Y-%m-%d")),
         OW_end = case_when(PATIENTVITAL_STATUS == 0 ~ max(as.Date("2018-01-01",format = "%Y-%m-%d"), death_dt),
                            PATIENTVITAL_STATUS == 1 ~ end_supply),
         OW_duration = as.integer(ceiling((difftime(OW_end, "2018-01-01", units = "weeks"))/4) * 4),
         OW_duration = ifelse(OW_duration < 0, 0, OW_duration))

# 3. loop through
result_list <- c()
for (i in unique(study_run2$StudyID)){
  study_data <- study_run2[study_run2$StudyID == i, ]
  result <- run_CMA(study_data, "CMA7")
  result_list[[i]] <- result
}

cma7_simpleOW <- bind_rows(result_list)
saveRDS(cma7_simpleOW, "./data/cma7-simpleOW.rds")


run_CMA_90days <- function(data, CMA_choice){
  # creating these so can change inside of function to be able to loop thru
  FU_start <- as.Date("2017-10-09", format = "%Y-%m-%d") 
  FU_end <- as.Date("2022-01-01", format = "%Y-%m-%d")
  FU_duration <- as.integer(difftime(FU_end, FU_start, units = "weeks"))
  Jan1 <- as.Date("2018-01-01", format = "%Y-%m-%d")
  
  OW_duration <- min(208, first(data$OW_duration), na.rm = TRUE)
  
    cma <- CMA_sliding_window(CMA.to.apply = CMA_choice,
                     data = data,
                     ID.colname = "StudyID",
                     event.date.colname = "dispense_dt",
                     event.duration.colname = "days_supply",
                     event.daily.dose.colname ="daily_dose",
                     medication.class.colname = "AETdrug",
                     carry.only.for.same.medication = FALSE,
                     consider.dosage.change = FALSE,
                     followup.window.start = FU_start,
                     followup.window.duration = FU_duration,
                     followup.window.duration.unit = "weeks",
                     observation.window.start = Jan1,
                     observation.window.duration = OW_duration,
                     observation.window.duration.unit = "weeks",
                     sliding.window.start = 0, 
                     sliding.window.start.unit = "weeks",
                     sliding.window.duration = 4,
                     sliding.window.duration.unit = "weeks",
                     # if window and step are same, there is no overlap
                     sliding.window.step.duration = 4,
                     sliding.window.step.unit = "weeks",
                     date.format = "%Y/%m/%d",
                     parallel.backend = "none",
                     parallel.threads = 1) 
  result <- as_tibble(cma$CMA)
  return(result)
}
# step 2. add columns back
study_run3 <- study_pop %>%
  inner_join(ID_dispense, by = "StudyID") %>%
  mutate(horm_mo = case_when(is.na(CTCRX_SUMM_DATE_HORMONE_MM) ~ 1,
                              TRUE ~ CTCRX_SUMM_DATE_HORMONE_MM),
         horm_dd = case_when(is.na(CTCRX_SUMM_DATE_HORMONE_DD) ~ 1,
                            TRUE ~ CTCRX_SUMM_DATE_HORMONE_DD),
         horm_dt = case_when(!is.na(CTCRX_SUMM_DATE_HORMONE_YYYY) ~ as.Date(
           paste(CTCRX_SUMM_DATE_HORMONE_YYYY,
                 sprintf("%02d", as.numeric(horm_mo)),
                 sprintf("%02d", as.numeric(horm_dd)),
                 sep = "-"), format = "%Y-%m-%d")),
         horm_end_dt = horm_dt + years(5),
         death_dt = case_when(PATIENTVITAL_STATUS == 0 ~ as.Date(paste(PATIENTDATE_OF_LAST_CONTACT_YYYY, PATIENTDATE_OF_LAST_CONTACT_MM, PATIENTDATE_OF_LAST_CONTACT_DD,
                 sep = "-"), format = "%Y-%m-%d")),
         OW_end = case_when(PATIENTVITAL_STATUS == 0 ~ max(as.Date("2018-01-01",format = "%Y-%m-%d"), death_dt),
                            PATIENTVITAL_STATUS == 1 ~ max(end_supply, horm_end_dt, na.rm = TRUE)),
         OW_duration = as.integer(ceiling((difftime(OW_end, "2018-01-01", units = "weeks"))/4) * 4),
         OW_duration = ifelse(OW_duration < 0, 0, OW_duration))

# 3. loop through
result_list <- c()
for (i in unique(study_run3$StudyID)){
  study_data <- study_run3[study_run3$StudyID == i, ]
  result <- run_CMA(study_data, "CMA7")
  result_list[[i]] <- result
}

cma7_90days <- bind_rows(result_list)
```

```{r}
#| echo: false
#| warning: false
#| label: other-analyses
#| fig-cap: "OW without 5-year time window"

cma7_simpleOW <- readRDS("./data/cma7-simpleOW.rds")
cma7_OW_results <- get_cma_results(cma7_simpleOW, march14)
# function output is dataset with summaries for each time interval, regression model, regression summary, and plot for times with NO missings.
cma7_OW_data <- cma7_OW_results$data_summary
OW_plot <- cma7_OW_results$reg_plot + 
labs(x = "Year", y = "Proportion Adherent (80%)") +
  scale_y_continuous(limits = c(0.1,1)) + 
  theme_bw()
OW_plot
```
